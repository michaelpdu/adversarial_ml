function OnFinish(selProj, selObj) {
    try {
        wizard.AddSymbol('SAFE_PROJECT_HELP_FILE_NAME', CreateSafeName(wizard.FindSymbol('PROJECT_NAME')));
        wizard.AddSymbol('RC2_FILE_NAME', CreateASCIIName(wizard.FindSymbol('PROJECT_NAME')));
        wizard.AddSymbol('RC_FILE_NAME', CreateSafeRCFileName(wizard.FindSymbol('PROJECT_NAME')) + '.rc');
        if (wizard.FindSymbol('AUTOMATION'))
            wizard.AddSymbol('SAFE_IDL_NAME', CreateASCIIName(wizard.FindSymbol('PROJECT_NAME')));
        var bOLEDB = wizard.FindSymbol('OLEDB');
        if (bOLEDB) {
            var strRowsetClass = wizard.FindSymbol('ROWSET_CLASS');
            var bAttributed = wizard.FindSymbol('ATTRIBUTED');
            var strCode = wizard.GetConsumerClass(strRowsetClass, bAttributed);
            wizard.AddSymbol('ROWSET_CLASS_CODE', strCode);
        } else {
            var bODBC = wizard.FindSymbol('ODBC');
            if (bODBC) {
                var strRowsetClass = wizard.FindSymbol('ROWSET_CLASS');
                var bSnapshot = wizard.FindSymbol('SNAPSHOT');
                var bBindAllColumns = wizard.FindSymbol('BIND_ALL_COLUMNS');
                var strCodeDecl = wizard.GetODBCConsumerClassDecl(bBindAllColumns, bSnapshot, strRowsetClass);
                var strCodeImpl = wizard.GetODBCConsumerClassImpl();
                wizard.AddSymbol('ROWSET_CLASS_ODBC_DECL', strCodeDecl);
                wizard.AddSymbol('ROWSET_CLASS_ODBC_IMPL', strCodeImpl);
            }
        }
        var strProjectPath = wizard.FindSymbol('PROJECT_PATH');
        var strProjectName = wizard.FindSymbol('PROJECT_NAME');
        selProj = CreateProject(strProjectName, strProjectPath);
        AddCommonConfig(selProj, strProjectName, wizard.FindSymbol('UNICODE'));
        AddSpecificConfig(selProj, strProjectName, strProjectPath);
        SetupFilters(selProj);
        var strDocTypeName = wizard.FindSymbol('DOC_TYPE_NAME');
        if (strDocTypeName != '') {
            wizard.AddSymbol('SAFE_DOC_TYPE_NAME', CreateSafeName(strDocTypeName));
        }
        selProj.Object.keyword = 'MFCProj';
        SetResDlgFont();
        AddFilesToProjectWithInfFile(selProj, strProjectName);
        SetCommonPchSettings(selProj);
        var Sdl = wizard.FindSymbol('SDL_CHECK');
        if (Sdl) {
            EnableSDLCheckSettings(selProj);
        }
        selProj.Object.Save();
        if (wizard.FindSymbol('APP_TYPE_DLG')) {
            var strDialogId = 'IDD_' + wizard.FindSymbol('UPPER_CASE_SAFE_PROJECT_IDENTIFIER_NAME') + '_DIALOG';
            var oResHelper = wizard.ResourceHelper;
            oResHelper.OpenResourceFile(strProjectPath + '\\' + strProjectName + '.rc');
            oResHelper.OpenResourceInEditor('Dialog', strDialogId);
        }
        var fUnicode = wizard.FindSymbol('UNICODE');
        fUnicode = fUnicode == true;
        SetAllConfigCharset(selProj, fUnicode);
        if (wizard.FindSymbol('PREVIEW_HANDLER') || wizard.FindSymbol('SEARCH_HANDLER') || wizard.FindSymbol('THUMBNAIL_HANDLER')) {
            var strATLProjectName = strProjectName + 'Handlers';
            var strATLProjectNameSafe = CreateASCIIName(strATLProjectName);
            wizard.AddSymbol('CLOSE_SOLUTION', false);
            oFSO = new ActiveXObject('Scripting.FileSystemObject');
            strATLProjectPath = oFSO.GetAbsolutePathName(strProjectPath + '\\..\\' + strATLProjectName);
            var strBaseProjectName = wizard.FindSymbol('PROJECT_NAME');
            wizard.AddSymbol('BASE_PROJECT_NAME', strBaseProjectName);
            wizard.AddSymbol('PROJECT_NAME', strATLProjectName);
            wizard.AddSymbol('PROJECT_PATH', strATLProjectPath);
            wizard.AddSymbol('LIB_NAME', strATLProjectName);
            wizard.AddSymbol('UPPER_CASE_SAFE_PROJECT_IDENTIFIER_NAME', CreateSafeName(strATLProjectName).toUpperCase());
            wizard.AddSymbol('SAFE_IDL_NAME', strATLProjectNameSafe);
            wizard.AddSymbol('SAFE_ATL_MODULE_NAME', CreateClassName(strATLProjectNameSafe, 'Module'));
            wizard.AddSymbol('SAFE_MFC_APP_NAME', CreateClassName(strATLProjectNameSafe, 'App'));
            CreateGuids();
            var oATLProj = CreateProject(strATLProjectName, strATLProjectPath);
            SetupFilters(oATLProj);
            oATLProj.Object.keyword = 'AtlProj';
            AddFilesToProjectWithNamedInfFile(oATLProj, strATLProjectName, 'Handler_Templates.inf');
            SetCommonPchSettings(oATLProj);
            SetATLConfigsType(oATLProj, typeDynamicLibrary);
            SetATLConfigsATL(oATLProj);
            SetAllConfigCharset(oATLProj, true);
            SetATLConfigsToolSettings(oATLProj, strATLProjectName);
            SetATLConfigsMFC(oATLProj);
            SetFileSettings(oATLProj);
            var strMFCDocHeader = '..\\' + strBaseProjectName + '\\' + wizard.FindSymbol('DOC_HEADER');
            if (oATLProj.Object.CanAddFile(strMFCDocHeader)) {
                oATLProj.Object.AddFile(strMFCDocHeader);
            }
            var strMFCDocImpl = '..\\' + strBaseProjectName + '\\' + wizard.FindSymbol('DOC_IMPL');
            if (oATLProj.Object.CanAddFile(strMFCDocImpl)) {
                oATLProj.Object.AddFile(strMFCDocImpl);
            }
            if (wizard.FindSymbol('PREVIEW_HANDLER')) {
                var strMFCViewHeader = '..\\' + strBaseProjectName + '\\' + wizard.FindSymbol('VIEW_HEADER');
                if (oATLProj.Object.CanAddFile(strMFCViewHeader)) {
                    oATLProj.Object.AddFile(strMFCViewHeader);
                }
                var strMFCViewImpl = '..\\' + strBaseProjectName + '\\' + wizard.FindSymbol('VIEW_IMPL');
                if (oATLProj.Object.CanAddFile(strMFCViewImpl)) {
                    oATLProj.Object.AddFile(strMFCViewImpl);
                }
            }
            var strMFCCntrHeader = '..\\' + strBaseProjectName + '\\CntrItem.h';
            strFile = oFSO.GetAbsolutePathName(strATLProjectPath + '\\' + strMFCCntrHeader);
            if (oFSO.FileExists(strFile) && oATLProj.Object.CanAddFile(strMFCCntrHeader)) {
                oATLProj.Object.AddFile(strMFCCntrHeader);
                var strMFCCntrImpl = '..\\' + strBaseProjectName + '\\CntrItem.cpp';
                strFile = oFSO.GetAbsolutePathName(strATLProjectPath + '\\' + strMFCCntrImpl);
                if (oFSO.FileExists(strFile) && oATLProj.Object.CanAddFile(strMFCCntrImpl)) {
                    oATLProj.Object.AddFile(strMFCCntrImpl);
                }
            }
            var strMFCSrvrHeader = '..\\' + strBaseProjectName + '\\SrvrItem.h';
            strFile = oFSO.GetAbsolutePathName(strATLProjectPath + '\\' + strMFCSrvrHeader);
            if (oFSO.FileExists(strFile) && oATLProj.Object.CanAddFile(strMFCSrvrHeader)) {
                oATLProj.Object.AddFile(strMFCSrvrHeader);
                var strMFCSrvrImpl = '..\\' + strBaseProjectName + '\\SrvrItem.cpp';
                strFile = oFSO.GetAbsolutePathName(strATLProjectPath + '\\' + strMFCSrvrImpl);
                if (oFSO.FileExists(strFile) && oATLProj.Object.CanAddFile(strMFCSrvrImpl)) {
                    oATLProj.Object.AddFile(strMFCSrvrImpl);
                }
            }
            var L_strGenerated_Text = '\uFFFD\uFFFD\uFFFDɵ\uFFFD\uFFFDļ\uFFFD';
            var strIdlName = wizard.FindSymbol('SAFE_IDL_NAME');
            var oGeneratedFiles = oATLProj.Object.AddFilter(L_strGenerated_Text);
            if (oGeneratedFiles) {
                oGeneratedFiles.SourceControlFiles = false;
                var files = oATLProj.Object.Files;
                var file;
                file = files(strIdlName + '_i.c');
                if (file.CanMove(oGeneratedFiles))
                    file.Move(oGeneratedFiles);
                file = files(strIdlName + '_i.h');
                if (file.CanMove(oGeneratedFiles))
                    file.Move(oGeneratedFiles);
            }
            oATLProj.Object.Save();
        }
    } catch (e) {
        if (e.description.length != 0)
            SetErrorInfo(e);
        return e.number;
    }
}